package atlas;

// Ancillary information from the robot

struct status_t
{
  int64_t utime;
  int64_t seq_id;                          
  int64_t processed_to_robot_packet_seq_id;

  int64_t control_data_version_mismatch;

  int32_t run_state;
  int64_t robot_status_flags;

  float pump_inlet_pressure;   
  float pump_supply_pressure;  
  float pump_return_pressure;  
  float air_sump_pressure;     
  float pump_time_meter;     
  float current_pump_rpm;     

  int32_t behavior;

  behavior_feedback_t behavior_feedback;
  stand_feedback_t stand_feedback;
  step_feedback_t step_feedback;
  walk_feedback_t walk_feedback;
  manipulate_feedback_t manipulate_feedback;

  //
  int64_t sensor_head_pps_timestamp;


  //////////////////////////////////////////
  // Run State:
  const int32_t RUN_STATE_IDLE =0;
  const int32_t RUN_STATE_START =1;
  // no state 2
  const int32_t RUN_STATE_CONTROL =3;
  // no state 4
  const int32_t RUN_STATE_STOP =5;

  // Behavior:
  const int32_t BEHAVIOR_NONE=0;        //!< Robot currently not in any behavior; software freeze, controls disabled.
  const int32_t BEHAVIOR_FREEZE=1;      //!< All joints frozen in current position.
  const int32_t BEHAVIOR_STAND_PREP=2;  //!< Robot assumes a balanced posture, preparing for Stand.
  const int32_t BEHAVIOR_STAND=3;       //!< Statically stable stand.
  const int32_t BEHAVIOR_WALK=4;        //!< Dynamically stable walk.
  const int32_t BEHAVIOR_STEP=5;        //!< Statically stable, single-step walk.
  const int32_t BEHAVIOR_MANIPULATE=6;  //!< Statically stable stand, with upper body joints controlled by user.
  const int32_t BEHAVIOR_USER=7;        //!< Setpoints and gains set by user.
  const int32_t BEHAVIOR_CALIBRATE=8;   //!< Robot moves through various calibration motions, returns to Freeze.
  const int32_t BEHAVIOR_SOFT_STOP=9;   //!< "Safe" falling behavior, robot tucks its arms and legs and uses soft position gains
}




