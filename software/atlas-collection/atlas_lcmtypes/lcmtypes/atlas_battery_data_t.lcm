package atlas;

// Ancillary information from the robot

struct battery_data_t
{
  int64_t utime;
  // Battery charging indicator (0 or 1).  A value of 1 implies charging.
  int32_t charging;

  // Last measured instantaneous load voltage (volts)
  float voltage;

  // Last measured instantaneous load current (ampers)
  float current;

  // Estimated Time before battery failure (seconds)
  // The seconds count will be multiples of 60 seconds due to granularity
  float remaining_time;

  // Estimated charge transfer capacity of the battery (Amp-hours)
  // Analogous to your automobile's gas gauge.  It's an indication of the
  // capability of the battery to deliver power at the current voltage.
  float remaining_amp_hours;

  // Estimated percentage of charge remaining in the battery (percent)
  //
  // The battery's output power will shut off when this reaches zero, causing
  // the robot to fall.
  float remaining_charge_percentage;

  // Battery charge/discharge cycle count (count)
  // The battery emulator does not support this feature and will return a
  // constant value of 1.  When running on battery power, this field 
  // increments with the number of charge-discharge cycles that the battery
  // has experienced.
  int32_t cycle_count;
  
  
  //  A physical (real) battery may be in storage mode (asleep). 
  //  The in_storage_mode value is 1 for a battery in storage mode, and 0 otherwise.
  //  A battery in storage mode will not deliver power.  The battery emulator 
  //  will return 0 always. Boston Dynamics will be responsible for taking
  //  batteries out of storage mode
  int32_t in_storage_mode;

  // For a physical (real) battery this value returns the highest cell temperature
  // in the battery. A value of 60 C or greater will cause the battery to shut down.
  // The battery emulator will return 0 always.
  float temperature;
}
